// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 枚举定义
enum UserRole {
  ADMIN
  MANAGER
  DRIVER
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_TRANSIT
  DELIVERED
  CANCELLED
  RETURNED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum PaymentStatus {
  UNPAID
  PARTIALLY_PAID
  PAID
  REFUNDED
}

enum VehicleType {
  TRUCK
  VAN
  TRAILER
}

enum VehicleStatus {
  AVAILABLE
  IN_TRANSIT
  MAINTENANCE
  UNAVAILABLE
}

enum ScheduleStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  DELAYED
}

enum TrackingStatus {
  NORMAL
  SPEEDING
  IDLING
  STOPPED
  OFF_ROUTE
  LOW_BATTERY
  NO_SIGNAL
  EMERGENCY
  MAINTENANCE
}

enum TrackingEvent {
  DEPARTURE
  ARRIVAL
  STOP
  RESUME
  FUEL_REFILL
  REST_BREAK
  DELAY
  ACCIDENT
  BREAKDOWN
  WEATHER_DELAY
  TRAFFIC_DELAY
}

enum AlertType {
  GEOFENCE
  SPEEDING
  IDLING
  DEVIATION
  DELAY
  EMERGENCY
  LOW_FUEL
  MAINTENANCE
  SCHEDULE
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AlertStatus {
  ACTIVE
  ACKNOWLEDGED
  RESOLVED
  DISMISSED
}

enum RouteStatus {
  PLANNED
  ACTIVE
  COMPLETED
  CANCELLED
  MODIFIED
}

enum CheckpointType {
  WAYPOINT
  STOP
  REST
  FUEL
  CHECK
  DELIVERY
}

enum CheckpointStatus {
  PENDING
  APPROACHING
  ARRIVED
  PASSED
  MISSED
  SKIPPED
}

enum ReceiptStatus {
  PENDING
  UPLOADED
  VERIFIED
  REJECTED
}

enum CommandStatus {
  PENDING
  EXECUTING
  COMPLETED
  FAILED
}

// POD文档类型枚举
enum PODDocumentType {
  PROOF_OF_DELIVERY
  BILL_OF_LADING
  INVOICE
  RECEIPT
  PHOTOGRAPH
  CERTIFICATE
  OTHER
}

// POD状态枚举
enum PODStatus {
  PENDING
  UPLOADED
  PROCESSING
  VERIFIED
  APPROVED
  REJECTED
  ARCHIVED
}

// 签名类型枚举
enum SignatureType {
  WRITTEN
  DIGITAL
  STAMP
  ELECTRONIC
}

// 签名状态枚举
enum SignatureStatus {
  PENDING
  SIGNED
  VERIFIED
  REJECTED
}

enum CustomerType {
  COMPANY
  INDIVIDUAL
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  BLACKLISTED
}

// 用户模型
model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  name      String
  role      UserRole @default(CUSTOMER)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  vehicles    Vehicle[]
  receipts    Receipt[]
  nlCommands  NLCommand[]
  auditLogs   AuditLog[]

  @@map("users")
}

// 客户模型
model Customer {
  id                String   @id @default(cuid())
  customerNumber    String   @unique
  customerType      CustomerType @default(COMPANY)

  // 公司信息 (仅企业客户)
  companyName       String?
  businessLicense   String?
  taxNumber         String?
  industry          String?

  // 个人信息 (仅个人客户)
  firstName         String?
  lastName          String?
  idNumber          String?

  // 联系信息
  email             String   @unique
  phone             String
  secondaryPhone    String?

  // 地址信息
  address           String
  city              String
  province          String
  postalCode        String?

  // 客户状态
  status            CustomerStatus @default(ACTIVE)
  creditRating      Int      @default(0)  // 信用评分 0-100

  // 财务信息
  creditLimit       Float    @default(0)
  outstandingBalance Float   @default(0)
  paymentTerms      String?  // 付款条件

  // 业务统计
  totalOrders       Int      @default(0)
  totalAmount       Float    @default(0)
  lastOrderDate     DateTime?

  // 元数据
  notes             String?
  tags              String[] // 客户标签
  createdBy         String
  updatedBy         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // 关联关系
  orders            Order[]
  shipments         Shipment[]
  contacts          CustomerContact[]
  documents         Document[]

  @@map("customers")
}

model CustomerContact {
  id         String   @id @default(cuid())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  name       String
  position   String?
  phone      String
  email      String?
  isPrimary  Boolean  @default(false)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("customer_contacts")
}

// 订单模型
model Order {
  id          String   @id @default(cuid())
  orderNumber String   @unique
  customerId  String   @db.Uuid
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  // 货物信息
  cargoName     String
  cargoWeight   Float
  cargoVolume   Float
  cargoValue    Float?

  // 运输信息
  originAddress      String
  destinationAddress String
  originContact      String
  destinationContact String

  // 时间信息
  pickupTime    DateTime?
  deliveryTime  DateTime?
  expectedTime  DateTime

  // 订单状态
  status        OrderStatus @default(PENDING)
  priority      Priority    @default(MEDIUM)

  // 费用信息
  totalAmount   Float
  paymentStatus PaymentStatus @default(UNPAID)

  // 元数据
  notes         String?
  createdBy     String
  updatedBy     String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // 关联关系
  shipments    Shipment[]
  documents    Document[]
  trackingLogs TrackingLog[]

  @@map("orders")
  @@index([status])
  @@index([customerId])
  @@index([priority])
  @@index([paymentStatus])
  @@index([createdAt])
  @@index([expectedTime])
}

// 车辆模型
model Vehicle {
  id                String        @id @default(uuid()) @db.Uuid
  licensePlate      String        @unique
  type              VehicleType
  capacity          Float
  driverId          String        @db.Uuid
  driver            User          @relation(fields: [driverId], references: [id], onDelete: Cascade)
  status            VehicleStatus @default(AVAILABLE)
  currentLocation   String?
  lastMaintenance   DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // 关系
  schedules Schedule[]
  orders    Order[]

  @@map("vehicles")
  @@index([status])
  @@index([driverId])
  @@index([licensePlate])
}

// 排车调度模型
model Schedule {
  id                 String          @id @default(uuid()) @db.Uuid
  orderId            String          @db.Uuid
  order              Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  vehicleId          String          @db.Uuid
  vehicle            Vehicle         @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  plannedDeparture   DateTime
  plannedArrival     DateTime
  actualDeparture    DateTime?
  actualArrival      DateTime?
  status             ScheduleStatus  @default(PLANNED)
  route              String[]
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  @@map("schedules")
  @@index([orderId])
  @@index([vehicleId])
  @@index([status])
  @@index([plannedDeparture])
  @@index([plannedArrival])
}

// 实时跟踪模型
model Tracking {
  id          String          @id @default(uuid()) @db.Uuid
  orderId     String          @db.Uuid
  order       Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  location    String
  coordinates Json            // {"lat": 0.0, "lng": 0.0}
  status      TrackingStatus  @default(IN_TRANSIT)
  timestamp   DateTime        @default(now())
  notes       String?
  imageUrl    String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("trackings")
  @@index([orderId])
  @@index([status])
  @@index([timestamp])
  @@index([location])
}

// 回单模型
model Receipt {
  id          String         @id @default(uuid()) @db.Uuid
  orderId     String         @db.Uuid
  order       Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  status      ReceiptStatus  @default(PENDING)
  imageUrl    String?
  notes       String?
  verifiedBy  String?        @db.Uuid
  verifiedAt  DateTime?
  verifier    User?          @relation(fields: [verifiedBy], references: [id])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("receipts")
  @@index([orderId])
  @@index([status])
  @@index([verifiedBy])
  @@index([verifiedAt])
}

// 自然语言命令模型
model NLCommand {
  id          String        @id @default(uuid()) @db.Uuid
  command     String
  intent      String
  parameters  Json          // {"key": "value"}
  confidence  Float         @default(0.0)
  status      CommandStatus @default(PENDING)
  executed    Boolean       @default(false)
  result      Json?
  error       String?
  userId      String?       @db.Uuid
  user        User?         @relation(fields: [userId], references: [id])
  orderId     String?       @db.Uuid
  order       Order?        @relation(fields: [orderId], references: [id])
  createdAt   DateTime      @default(now())
  executedAt  DateTime?
  updatedAt   DateTime      @updatedAt

  @@map("nl_commands")
  @@index([intent])
  @@index([status])
  @@index([userId])
  @@index([createdAt])
  @@index([executed])
}

// 意图定义模型
model Intent {
  id                 String  @id @default(uuid()) @db.Uuid
  name               String  @unique
  description        String
  parameters         Json    // [{"name": "param", "type": "string", "required": true}]
  requiredParameters String[]
  examples           String[]
  isActive           Boolean @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("intents")
  @@index([name])
  @@index([isActive])
}

// 系统配置模型
model SystemConfig {
  id          String  @id @default(uuid()) @db.Uuid
  key         String  @unique
  value       Json
  description String?
  category    String  @default("general")
  isPublic    Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_configs")
  @@index([key])
  @@index([category])
}

// 审计日志模型
model AuditLog {
  id          String   @id @default(uuid()) @db.Uuid
  action      String
  entity      String
  entityId    String   @db.Uuid
  userId      String?  @db.Uuid
  user        User?    @relation(fields: [userId], references: [id])
  oldValues   Json?
  newValues   Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  @@map("audit_logs")
  @@index([action])
  @@index([entity])
  @@index([entityId])
  @@index([userId])
  @@index([createdAt])
}

// 运单模型
model Shipment {
  id                String        @id @default(cuid())
  shipmentNumber    String        @unique
  customerId        String
  customer          Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  orderId           String?
  order             Order?        @relation(fields: [orderId], references: [id])
  vehicleId         String?
  vehicle           Vehicle?      @relation(fields: [vehicleId], references: [id])

  originAddress     String
  destinationAddress String
  weight            Float
  volume            Float
  value             Float?

  departureTime     DateTime?
  estimatedArrival  DateTime?
  actualArrival     DateTime?

  status            String        @default("PLANNED")
  driverNotes       String?
  customerNotes     String?

  createdBy         String
  updatedBy         String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@map("shipments")
  @@index([customerId])
  @@index([orderId])
  @@index([vehicleId])
  @@index([status])
}

// 文档模型
model Document {
  id          String   @id @default(cuid())
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  orderId     String?
  order       Order?   @relation(fields: [orderId], references: [id])

  title       String
  type        String
  fileUrl     String
  fileSize    Int?
  mimeType    String?
  description String?
  tags        String[]

  isPublic    Boolean  @default(false)
  isRequired  Boolean  @default(false)

  uploadedBy  String
  approvedBy  String?
  approvedAt  DateTime?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("documents")
  @@index([customerId])
  @@index([orderId])
  @@index([type])
}

// 跟踪日志模型
model TrackingLog {
  id          String   @id @default(cuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  location    String
  status      String
  coordinates Json     // {"lat": 0.0, "lng": 0.0}
  notes       String?
  imageUrl    String?
  createdAt   DateTime @default(now())

  @@map("tracking_logs")
  @@index([orderId])
  @@index([status])
  @@index([createdAt])
}