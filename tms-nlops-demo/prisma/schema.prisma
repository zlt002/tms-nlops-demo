// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 枚举定义
enum UserRole {
  ADMIN
  MANAGER
  DRIVER
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_TRANSIT
  DELIVERED
  CANCELLED
  RETURNED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum PaymentStatus {
  UNPAID
  PARTIALLY_PAID
  PAID
  REFUNDED
}

enum VehicleType {
  TRUCK
  VAN
  TRAILER
}

enum VehicleStatus {
  AVAILABLE
  IN_TRANSIT
  MAINTENANCE
  UNAVAILABLE
}

enum ScheduleStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  DELAYED
}

enum TrackingStatus {
  NORMAL
  SPEEDING
  IDLING
  STOPPED
  OFF_ROUTE
  LOW_BATTERY
  NO_SIGNAL
  EMERGENCY
  MAINTENANCE
}

enum TrackingEvent {
  DEPARTURE
  ARRIVAL
  STOP
  RESUME
  FUEL_REFILL
  REST_BREAK
  DELAY
  ACCIDENT
  BREAKDOWN
  WEATHER_DELAY
  TRAFFIC_DELAY
}

enum AlertType {
  GEOFENCE
  SPEEDING
  IDLING
  DEVIATION
  DELAY
  EMERGENCY
  LOW_FUEL
  MAINTENANCE
  SCHEDULE
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AlertStatus {
  ACTIVE
  ACKNOWLEDGED
  RESOLVED
  DISMISSED
}

enum RouteStatus {
  PLANNED
  ACTIVE
  COMPLETED
  CANCELLED
  MODIFIED
}

enum CheckpointType {
  WAYPOINT
  STOP
  REST
  FUEL
  CHECK
  DELIVERY
}

enum CheckpointStatus {
  PENDING
  APPROACHING
  ARRIVED
  PASSED
  MISSED
  SKIPPED
}

enum DispatchStatus {
  PLANNING
  SCHEDULED
  ASSIGNED
  IN_TRANSIT
  COMPLETED
  CANCELLED
  DELAYED
}

enum DriverStatus {
  AVAILABLE
  ON_DUTY
  DRIVING
  RESTING
  OFF_DUTY
  SICK_LEAVE
  VACATION
  SUSPENDED
}

enum ReceiptStatus {
  PENDING
  UPLOADED
  VERIFIED
  REJECTED
}

enum CommandStatus {
  PENDING
  EXECUTING
  COMPLETED
  FAILED
}

// POD文档类型枚举
enum PODDocumentType {
  PROOF_OF_DELIVERY
  BILL_OF_LADING
  INVOICE
  RECEIPT
  PHOTOGRAPH
  CERTIFICATE
  OTHER
}

// POD状态枚举
enum PODStatus {
  PENDING
  UPLOADED
  PROCESSING
  VERIFIED
  APPROVED
  REJECTED
  ARCHIVED
}

// 签名类型枚举
enum SignatureType {
  WRITTEN
  DIGITAL
  STAMP
  ELECTRONIC
}

// 签名状态枚举
enum SignatureStatus {
  PENDING
  SIGNED
  VERIFIED
  REJECTED
}

enum CustomerType {
  COMPANY
  INDIVIDUAL
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  BLACKLISTED
}

// 用户模型
model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  name      String
  role      UserRole @default(CUSTOMER)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  vehicles        Vehicle[]
  receipts        Receipt[]
  nlCommands      NLCommand[]
  auditLogs       AuditLog[]
  verifiedPODs    POD[]            @relation("PODVerifier", fields: [id], references: [verifiedBy])
  approvedPODs    POD[]            @relation("PODApprover", fields: [id], references: [approvedBy])
  rejectedPODs    POD[]            @relation("PODRejector", fields: [id], references: [rejectedBy])
  podSignatures   PODSignature[]
  podActivityLogs PODActivityLog[]

  @@map("users")
}

// 客户模型
model Customer {
  id                String   @id @default(cuid())
  customerNumber    String   @unique
  customerType      CustomerType @default(COMPANY)

  // 公司信息 (仅企业客户)
  companyName       String?
  businessLicense   String?
  taxNumber         String?
  industry          String?

  // 个人信息 (仅个人客户)
  firstName         String?
  lastName          String?
  idNumber          String?

  // 联系信息
  email             String   @unique
  phone             String
  secondaryPhone    String?

  // 地址信息
  address           String
  city              String
  province          String
  postalCode        String?

  // 客户状态
  status            CustomerStatus @default(ACTIVE)
  creditRating      Int      @default(0)  // 信用评分 0-100

  // 财务信息
  creditLimit       Float    @default(0)
  outstandingBalance Float   @default(0)
  paymentTerms      String?  // 付款条件

  // 业务统计
  totalOrders       Int      @default(0)
  totalAmount       Float    @default(0)
  lastOrderDate     DateTime?

  // 元数据
  notes             String?
  tags              String[] // 客户标签
  createdBy         String
  updatedBy         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // 关联关系
  orders            Order[]
  shipments         Shipment[]
  contacts          CustomerContact[]
  documents         Document[]

  @@map("customers")
}

model CustomerContact {
  id         String   @id @default(cuid())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  name       String
  position   String?
  phone      String
  email      String?
  isPrimary  Boolean  @default(false)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("customer_contacts")
}

// 订单模型
model Order {
  id          String   @id @default(cuid())
  orderNumber String   @unique
  customerId  String   @db.Uuid
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  // 货物信息
  cargoName     String
  cargoWeight   Float
  cargoVolume   Float
  cargoValue    Float?

  // 运输信息
  originAddress      String
  destinationAddress String
  originContact      String
  destinationContact String

  // 时间信息
  pickupTime    DateTime?
  deliveryTime  DateTime?
  expectedTime  DateTime

  // 订单状态
  status        OrderStatus @default(PENDING)
  priority      Priority    @default(MEDIUM)

  // 费用信息
  totalAmount   Float
  paymentStatus PaymentStatus @default(UNPAID)

  // 元数据
  notes         String?
  createdBy     String
  updatedBy     String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // 关联关系
  shipments    Shipment[]
  documents    Document[]
  trackingLogs TrackingLog[]

  @@map("orders")
  @@index([status])
  @@index([customerId])
  @@index([priority])
  @@index([paymentStatus])
  @@index([createdAt])
  @@index([expectedTime])
}

// 车辆模型
model Vehicle {
  id                String        @id @default(uuid()) @db.Uuid
  licensePlate      String        @unique
  type              VehicleType
  capacity          Float
  driverId          String?        @db.Uuid
  driver            User?         @relation(fields: [driverId], references: [id], onDelete: SetNull)
  status            VehicleStatus @default(AVAILABLE)
  currentLocation   String?
  lastMaintenance   DateTime?
  maxLoad           Float         @default(0)    // 最大载重(吨)
  maxVolume         Float         @default(0)    // 最大体积(立方米)
  fuelLevel         Float         @default(0)    // 燃油水平(%)
  dailyRate         Float         @default(0)    // 日租金
  maintenanceCost   Float         @default(0)    // 维护成本
  isActive          Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // 关系
  schedules Schedule[]
  orders    Order[]
  dispatches Dispatch[]
  shipments Shipment[]
  drivers   Driver[]

  @@map("vehicles")
  @@index([status])
  @@index([driverId])
  @@index([licensePlate])
}

// 驾驶员模型
model Driver {
  id            String       @id @default(cuid())
  driverNumber  String       @unique
  name          String
  phone         String
  email         String?
  licenseNumber String       @unique
  licenseType   String
  licenseExpiry DateTime
  address       String
  emergencyContact String?
  emergencyPhone String?

  // 状态信息
  status        DriverStatus @default(AVAILABLE)
  drivingYears  Int          @default(0)
  accidentCount Int          @default(0)
  violationCount Int         @default(0)

  // 工作信息
  hourlyRate    Float        // 小时工资
  monthlySalary Float?       // 月薪
  hireDate      DateTime
  lastMedicalCheck DateTime?

  // 评分信息
  rating        Float        @default(0) // 司机评分
  totalTrips    Int          @default(0)
  totalDistance Float        @default(0) // 总行驶里程

  // 元数据
  notes         String?
  tags          String[]
  isActive      Boolean      @default(true)
  createdBy     String
  updatedBy     String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // 关联关系
  vehicles      Vehicle[]
  shipments     Shipment[]
  documents     Document[]
  dispatches    Dispatch[]

  @@map("drivers")
  @@index([status])
  @@index([licenseNumber])
  @@index([isActive])
}

// 发车单模型
model Dispatch {
  id                String           @id @default(cuid())
  dispatchNumber    String           @unique
  customerId        String
  customer          Customer         @relation(fields: [customerId], references: [id], onDelete: Cascade)
  vehicleId         String
  vehicle           Vehicle          @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  driverId          String
  driver            Driver           @relation(fields: [driverId], references: [id], onDelete: Cascade)

  // 路线信息
  originAddress     String
  destinationAddress String
  originCoordinates String?          // JSON格式: {lat: number, lng: number}
  destinationCoordinates String?     // JSON格式: {lat: number, lng: number}
  distance          Float?           // 距离(公里)
  estimatedDuration Float?           // 预计时间(小时)

  // 时间信息
  plannedDeparture  DateTime         // 计划发车时间
  actualDeparture   DateTime?        // 实际发车时间
  estimatedArrival  DateTime         // 预计到达时间
  actualArrival     DateTime?        // 实际到达时间
  completedAt       DateTime?        // 完成时间
  cancelledAt       DateTime?        // 取消时间

  // 货物信息
  totalWeight       Float            // 总货物重量(吨)
  totalVolume       Float            // 总货物体积(立方米)
  totalValue        Float?           // 总货物价值

  // 费用信息
  baseRate          Float            // 基础费率
  fuelSurcharge     Float            @default(0) // 燃油附加费
  tollFees          Float            @default(0) // 过路费
  additionalCharges Float           @default(0) // 额外费用
  totalAmount       Float            // 总费用

  // 状态信息
  status            DispatchStatus   @default(SCHEDULED)
  priority          Priority         @default(MEDIUM)

  // 跟踪信息
  currentLocation   String?          // 当前位置
  currentCoordinates String?          // JSON格式
  progress          Float            @default(0) // 运输进度百分比
  route             Json?            // 路线信息

  // 元数据
  instructions      String?          // 运输说明
  requirements      String?          // 特殊要求
  notes             String?
  cancelReason      String?          // 取消原因
  createdBy         String
  updatedBy         String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // 关联关系
  shipments         Shipment[]
  trackingLogs      TrackingLog[]
  documents         Document[]

  @@map("dispatches")
  @@index([status])
  @@index([vehicleId])
  @@index([driverId])
  @@index([customerId])
  @@index([plannedDeparture])
  @@index([estimatedArrival])
  @@index([createdAt])
}

// 排车调度模型
model Schedule {
  id                 String          @id @default(uuid()) @db.Uuid
  orderId            String          @db.Uuid
  order              Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  vehicleId          String          @db.Uuid
  vehicle            Vehicle         @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  plannedDeparture   DateTime
  plannedArrival     DateTime
  actualDeparture    DateTime?
  actualArrival      DateTime?
  status             ScheduleStatus  @default(PLANNED)
  route              String[]
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  @@map("schedules")
  @@index([orderId])
  @@index([vehicleId])
  @@index([status])
  @@index([plannedDeparture])
  @@index([plannedArrival])
}

// 实时跟踪模型
model Tracking {
  id          String          @id @default(uuid()) @db.Uuid
  orderId     String          @db.Uuid
  order       Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  location    String
  coordinates Json            // {"lat": 0.0, "lng": 0.0}
  status      TrackingStatus  @default(NORMAL)
  timestamp   DateTime        @default(now())
  notes       String?
  imageUrl    String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("trackings")
  @@index([orderId])
  @@index([status])
  @@index([timestamp])
  @@index([location])
}

// 回单模型
model Receipt {
  id          String         @id @default(uuid()) @db.Uuid
  orderId     String         @db.Uuid
  order       Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  status      ReceiptStatus  @default(PENDING)
  imageUrl    String?
  notes       String?
  verifiedBy  String?        @db.Uuid
  verifiedAt  DateTime?
  verifier    User?          @relation(fields: [verifiedBy], references: [id])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("receipts")
  @@index([orderId])
  @@index([status])
  @@index([verifiedBy])
  @@index([verifiedAt])
}

// 自然语言命令模型
model NLCommand {
  id          String        @id @default(uuid()) @db.Uuid
  command     String
  intent      String
  parameters  Json          // {"key": "value"}
  confidence  Float         @default(0.0)
  status      CommandStatus @default(PENDING)
  executed    Boolean       @default(false)
  result      Json?
  error       String?
  userId      String?       @db.Uuid
  user        User?         @relation(fields: [userId], references: [id])
  orderId     String?       @db.Uuid
  order       Order?        @relation(fields: [orderId], references: [id])
  createdAt   DateTime      @default(now())
  executedAt  DateTime?
  updatedAt   DateTime      @updatedAt

  @@map("nl_commands")
  @@index([intent])
  @@index([status])
  @@index([userId])
  @@index([createdAt])
  @@index([executed])
}

// 意图定义模型
model Intent {
  id                 String  @id @default(uuid()) @db.Uuid
  name               String  @unique
  description        String
  parameters         Json    // [{"name": "param", "type": "string", "required": true}]
  requiredParameters String[]
  examples           String[]
  isActive           Boolean @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("intents")
  @@index([name])
  @@index([isActive])
}

// 系统配置模型
model SystemConfig {
  id          String  @id @default(uuid()) @db.Uuid
  key         String  @unique
  value       Json
  description String?
  category    String  @default("general")
  isPublic    Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_configs")
  @@index([key])
  @@index([category])
}

// 审计日志模型
model AuditLog {
  id          String   @id @default(uuid()) @db.Uuid
  action      String
  entity      String
  entityId    String   @db.Uuid
  userId      String?  @db.Uuid
  user        User?    @relation(fields: [userId], references: [id])
  oldValues   Json?
  newValues   Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  @@map("audit_logs")
  @@index([action])
  @@index([entity])
  @@index([entityId])
  @@index([userId])
  @@index([createdAt])
}

// 运单模型
model Shipment {
  id                String           @id @default(cuid())
  shipmentNumber    String           @unique
  customerId        String
  customer          Customer         @relation(fields: [customerId], references: [id], onDelete: Cascade)
  orderId           String?
  order             Order?           @relation(fields: [orderId], references: [id])
  dispatchId        String?
  dispatch          Dispatch?        @relation(fields: [dispatchId], references: [id], onDelete: Cascade)
  vehicleId         String?
  vehicle           Vehicle?         @relation(fields: [vehicleId], references: [id])
  driverId          String?
  driver            Driver?          @relation(fields: [driverId], references: [id])

  originAddress     String
  destinationAddress String
  originCoordinates String?          // JSON格式: {lat: number, lng: number}
  destinationCoordinates String?     // JSON格式: {lat: number, lng: number}
  weight            Float            // 货物重量(吨)
  volume            Float            // 货物体积(立方米)
  value             Float?           // 货物价值
  specialHandling   Boolean          @default(false) // 特殊处理需求

  departureTime     DateTime?        // 发车时间
  estimatedArrival  DateTime?        // 预计到达时间
  actualArrival     DateTime?        // 实际到达时间

  status            String           @default("PLANNED")
  sequence          Int              @default(1) // 在发车单中的顺序
  progress          Float            @default(0) // 运输进度百分比

  driverNotes       String?
  customerNotes     String?

  createdBy         String
  updatedBy         String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // 关联关系
  trackingLogs      TrackingLog[]
  checkpoints       ShipmentCheckpoint[]
  alerts            TrackingAlert[]
  route             TrackingRoute?

  @@map("shipments")
  @@index([customerId])
  @@index([orderId])
  @@index([dispatchId])
  @@index([vehicleId])
  @@index([driverId])
  @@index([status])
  @@index([sequence])
}

// 文档模型
model Document {
  id          String   @id @default(cuid())
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  orderId     String?
  order       Order?   @relation(fields: [orderId], references: [id])

  title       String
  type        String
  fileUrl     String
  fileSize    Int?
  mimeType    String?
  description String?
  tags        String[]

  isPublic    Boolean  @default(false)
  isRequired  Boolean  @default(false)

  uploadedBy  String
  approvedBy  String?
  approvedAt  DateTime?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("documents")
  @@index([customerId])
  @@index([orderId])
  @@index([type])
}

// 跟踪日志模型
model TrackingLog {
  id          String   @id @default(cuid())
  orderId     String?
  order       Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  shipmentId  String?
  shipment    Shipment? @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  dispatchId  String?
  dispatch    Dispatch? @relation(fields: [dispatchId], references: [id], onDelete: Cascade)

  location    String
  status      String
  coordinates Json     // {"lat": 0.0, "lng": 0.0}
  notes       String?
  imageUrl    String?
  event       String?  // 事件类型
  timestamp   DateTime @default(now())

  createdAt   DateTime @default(now())

  @@map("tracking_logs")
  @@index([orderId])
  @@index([shipmentId])
  @@index([dispatchId])
  @@index([status])
  @@index([timestamp])
  @@index([createdAt])
}

// POD文档模型
model POD {
  id                String           @id @default(cuid())
  podNumber         String           @unique
  orderId           String
  order             Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  documentType      PODDocumentType  @default(PROOF_OF_DELIVERY)
  status            PODStatus        @default(PENDING)

  // 文件信息
  fileName          String
  originalName      String
  fileSize          Int              // 文件大小(字节)
  mimeType          String           // MIME类型
  filePath          String           // 文件存储路径
  fileUrl           String           // 文件访问URL
  checksum          String           // 文件校验和

  // POD特有信息
  deliveryLocation  String?
  deliveryTime      DateTime?
  receiverName     String?
  receiverContact  String?
  cargoCondition   String?          // 货物状况描述
  specialNotes     String?          // 特殊说明

  // 审核信息
  verifiedBy        String?          @db.Uuid
  verifiedAt        DateTime?
  verifier          User?            @relation(fields: [verifiedBy], references: [id])
  approvedBy        String?          @db.Uuid
  approvedAt        DateTime?
  approver          User?            @relation("PODApprover", fields: [approvedBy], references: [id])
  rejectedBy        String?          @db.Uuid
  rejectedAt        DateTime?
  rejector          User?            @relation("PODRejector", fields: [rejectedBy], references: [id])
  rejectionReason   String?

  // 元数据
  tags              String[]
  metadata          String?          // JSON格式的额外元数据
  version           Int              @default(1)

  createdBy         String
  updatedBy         String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // 关联关系
  signatures        PODSignature[]
  activityLogs      PODActivityLog[]

  @@map("pods")
  @@index([orderId])
  @@index([documentType])
  @@index([status])
  @@index([verifiedBy])
  @@index([approvedBy])
  @@index([createdAt])
}

// POD签名模型
model PODSignature {
  id              String           @id @default(cuid())
  podId           String
  pod             POD              @relation(fields: [podId], references: [id], onDelete: Cascade)

  signerId        String           @db.Uuid
  signer          User             @relation("PODSigner", fields: [signerId], references: [id])
  signerName      String
  signerType      String           // DRIVER, RECEIVER, STAFF, etc.
  signatureData   String           // 签名图片数据(Base64)
  signatureType   SignatureType    @default(WRITTEN)

  // 签署信息
  ipAddress       String?
  userAgent       String?
  location        String?          // 签署位置
  timestamp       DateTime         @default(now())

  // 验证信息
  verificationCode String?
  isVerified      Boolean          @default(false)
  verifiedAt      DateTime?
  verifiedBy      String?          @db.Uuid
  verifier        User?            @relation("PODSignatureVerifier", fields: [verifiedBy], references: [id])

  status          SignatureStatus  @default(PENDING)
  reason          String?          // 签署原因或说明

  createdAt       DateTime         @default(now())

  @@map("pod_signatures")
  @@index([podId])
  @@index([signerId])
  @@index([status])
}

// POD活动日志模型
model PODActivityLog {
  id            String   @id @default(cuid())
  podId         String
  pod           POD      @relation(fields: [podId], references: [id], onDelete: Cascade)

  action        String   // 操作类型
  description   String   // 操作描述
  performedBy   String   @db.Uuid
  performer     User     @relation(fields: [performedBy], references: [id])
  changes       String?  // 变更内容(JSON格式)
  metadata      String?  // 额外元数据

  ipAddress     String?
  userAgent     String?
  timestamp     DateTime @default(now())

  @@map("pod_activity_logs")
  @@index([podId])
  @@index([performedBy])
  @@index([timestamp])
}// 跟踪警报模型
model TrackingAlert {
  id          String   @id @default(cuid())
  shipmentId  String
  shipment    Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  // 警报信息
  alertType   AlertType
  severity    AlertSeverity
  title       String
  description String
  location    String?  // JSON格式 {lat, lng, address}

  // 状态信息
  status      AlertStatus @default(ACTIVE)
  acknowledgedBy String?
  acknowledgedAt DateTime?

  // 时间信息
  triggeredAt DateTime @default(now())
  resolvedAt  DateTime?

  // 处理信息
  actionTaken String?
  resolution  String?
  notes       String?

  // 关联信息
  trackingLogId String?
  trackingLog TrackingLog? @relation(fields: [trackingLogId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tracking_alerts")
  @@index([shipmentId])
  @@index([alertType])
  @@index([severity])
  @@index([status])
  @@index([triggeredAt])
}

// 跟踪路线模型
model TrackingRoute {
  id          String   @id @default(cuid())
  shipmentId  String   @unique
  shipment    Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  // 路线信息
  plannedRoute String  // JSON格式，包含路线点
  actualRoute  String? // JSON格式，实际行驶路线
  distance     Float   // 距离(公里)
  duration     Float   // 预计时间(分钟)

  // 统计信息
  totalDistance Float? // 实际总距离
  totalDuration Float? // 实际总时间
  avgSpeed      Float? // 平均速度
  maxSpeed      Float? // 最高速度
  fuelUsed      Float? // 燃油消耗
  stops         Int     @default(0) // 停车次数
  idleTime      Float   @default(0) // 怠速时间(分钟)

  // 路线状态
  status       RouteStatus @default(PLANNED)
  deviation    Float    @default(0) // 偏差百分比
  isOptimal    Boolean  @default(true) // 是否最优路线

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // 关联关系
  checkpoints  TrackingCheckpoint[]

  @@map("tracking_routes")
  @@index([shipmentId])
  @@index([status])
}

// 跟踪检查点模型
model TrackingCheckpoint {
  id          String   @id @default(cuid())
  routeId     String
  route       TrackingRoute @relation(fields: [routeId], references: [id], onDelete: Cascade)

  // 检查点信息
  name        String
  type        CheckpointType
  address     String
  coordinates String   // JSON格式 {lat, lng}
  radius      Float    @default(100) // 半径(米)

  // 时间信息
  estimatedTime DateTime? // 预计到达时间
  actualTime    DateTime? // 实际到达时间
  duration      Float?    // 停留时间(分钟)

  // 状态信息
  status       CheckpointStatus @default(PENDING)
  isPassed     Boolean  @default(false)
  isRequired   Boolean  @default(true)

  // 统计信息
  visitCount   Int      @default(0)
  avgDuration  Float?   // 平均停留时间

  notes        String?
  order        Int      // 顺序
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("tracking_checkpoints")
  @@index([routeId])
  @@index([type])
  @@index([status])
}